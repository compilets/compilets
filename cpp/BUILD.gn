import("//testing/test.gni")

# This config will be applied on generated app code.
config("app_config") {
  include_dirs = [ ".." ]
  if (is_clang || !is_win) {
    cflags_cc = [
      "-Wno-unused-function",
      "-Wno-unused-result",
    ]
  }
}

config("runtime_exe_config") {
  include_dirs = [ "." ]
  defines = [ "COMPILETS_BUILDING_EXE" ]
}

config("runtime_node_config") {
  include_dirs = [ "." ]
  defines = [ "COMPILETS_BUILDING_NODE_MODULE" ]

  # Config for using kizunapi.
  include_dirs += [ "kizunapi" ]
  defines += [ "NAPI_VERSION=9" ]
  if (is_clang) {
    cflags_cc = [ "-Wno-misleading-indentation" ]
  }

  # Config for building Node.js module.
  include_dirs += [
    "node-headers/include",
    "node-headers/include/node",
  ]
  defines += [
    "USING_UV_SHARED=1",
    "USING_V8_SHARED=1",
    "BUILDING_NODE_EXTENSION",
  ]
  if (is_mac) {
    ldflags = [ "-undefined", "dynamic_lookup", ]
  } else if (is_win) {
    libs = [ "node-headers/" + current_cpu + "/node.lib", ]
  }
}

common_runtime_files = [
  "runtime/array.h",
  "runtime/console.cc",
  "runtime/console.h",
  "runtime/function.h",
  "runtime/math.h",
  "runtime/number.cc",
  "runtime/number.h",
  "runtime/object.h",
  "runtime/process.cc",
  "runtime/process.h",
  "runtime/runtime.cc",
  "runtime/runtime.h",
  "runtime/state.cc",
  "runtime/state.h",
  "runtime/string.cc",
  "runtime/string.h",
  "runtime/type_traits.cc",
  "runtime/type_traits.h",
  "runtime/union.h",
]

source_set("runtime_exe") {
  public_configs = [ ":runtime_exe_config" ]
  public_deps = [ "cppgc" ]
  deps = [ "simdutf" ]
  sources = common_runtime_files
  sources += [
    "runtime/exe/state_exe.cc",
    "runtime/exe/state_exe.h",
  ]
  configs -= [ "//build/config/compiler:no_exceptions" ]
  configs += [ "//build/config/compiler:exceptions"]
}

source_set("runtime_node") {
  public_configs = [ ":runtime_node_config" ]
  deps = [ "simdutf" ]
  sources = common_runtime_files
  sources += [
    "runtime/node/converters.h",
    "runtime/node/state_node.cc",
    "runtime/node/state_node.h",
  ]
  configs -= [ "//build/config/compiler:no_exceptions" ]
  configs += [ "//build/config/compiler:exceptions"]
}

test("cpp_unittests") {
  sources = [
    "runtime/tests/run_all.cc",
    "runtime/tests/array_unittest.cc",
    "runtime/tests/number_unittest.cc",
    "runtime/tests/stack_unittest.cc",
    "runtime/tests/string_unittest.cc",
    "runtime/tests/union_unittest.cc",
  ]

  include_dirs = [ "cppgc" ]
  cflags_cc = [ "-Wno-uninitialized-const-reference" ]

  deps = [
    ":runtime_exe",
    "//testing/gtest",
  ]
  configs -= [ "//build/config/compiler:no_exceptions" ]
  configs += [ "//build/config/compiler:exceptions"]
}
